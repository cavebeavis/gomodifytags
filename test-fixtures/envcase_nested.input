package foo

type foo1 struct {
	bar       string   
	MyExample bool     
	MyAnother []string 
}

type foo2 struct {
	AnotherVar string          
	SliceMan   []foo3          
	MapMaker   map[string]foo4 

	// ****** Numerical types ****** //
	Uint   uint    //either 32 or 64 bits
	Uint8  uint8   //the set of all unsigned  8-bit integers (0 to 255)
	Uint16 uint16  //the set of all unsigned 16-bit integers (0 to 65535)
	Uint32 uint32  //the set of all unsigned 32-bit integers (0 to 4294967295)
	Uint64 uint64  //the set of all unsigned 64-bit integers (0 to 18446744073709551615)

	Int   int    //same size as uint
	Int8  int8   //the set of all signed  8-bit integers (-128 to 127)
	Int16 int16  //the set of all signed 16-bit integers (-32768 to 32767)
	Int32 int32  //the set of all signed 32-bit integers (-2147483648 to 2147483647)
	Int64 int64  //the set of all signed 64-bit integers (-9223372036854775808 to 9223372036854775807)

	Float32 float32  //the set of all IEEE-754 32-bit floating-point numbers
	Float64 float64  //the set of all IEEE-754 64-bit floating-point numbers

	Complex64  complex64   //the set of all complex numbers with float32 real and imaginary parts
	Complex128 complex128  //the set of all complex numbers with float64 real and imaginary parts

	Byte byte  //alias for uint8
	Rune rune  //alias for int32

	//Uintptr    uintptr     //an unsigned integer large enough to store the uninterpreted bits of a pointer value

	// ****** String types ****** //
	String string  
	PtrID  *string 
}

type foo4 struct {
	Happy   string 
	UnHappy int    
}

type foo3 struct {
	ButtersBadBear   string 
	JohnnySilverhand string 
}
